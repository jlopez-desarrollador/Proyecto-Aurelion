def mostrar_menu():
    print("\n=== Men√∫ de secciones ===")
    print("1) Tema, problema y soluci√≥n")
    print("2) Dataset de referencia")
    print("3) Informaci√≥n, pasos, pseudoc√≥digo y diagrama")
    print("4) Sugerencias y mejoras")
    print("0) Salir")

def main():
    opcion = None
    while opcion != "0":
        mostrar_menu()
        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            print("\nüëâ Tema, problema y soluci√≥n:")
            print("üéØ Tema: Optimizaci√≥n de la estrategia comercial mediante el an√°lisis de ventas por ciudad. "
                  "El objetivo es identificar zonas con alto y bajo rendimiento para tomar decisiones "
                  "informadas que impulsen los ingresos.")
            print("‚ùó Problema: Actualmente no contamos con una visi√≥n clara sobre qu√© ciudades generan m√°s "
                  "ingresos y cu√°les tienen bajo rendimiento comercial. Esta falta de informaci√≥n limita "
                  "la capacidad de redise√±ar estrategias espec√≠ficas para mejorar las ventas en zonas menos activas.")
            print("‚úÖ Soluci√≥n: Utilizaremos Python y pandas para realizar un an√°lisis de ventas por ciudad.")

        elif opcion == "2":
            print("\nüëâ Dataset de referencia:")
            print("""
### Tabla: Ventas
| Campo          | Tipo de dato | Escala    |
|----------------|--------------|-----------|
| id_venta       | int          | Raz√≥n     |
| fecha          | datetime.date| Intervalo |
| id_cliente     | int          | Raz√≥n     |
| nombre_cliente | str          | Nominal   |
| email          | str          | Nominal   |
| medio_pago     | str          | Nominal   |

---

### Tabla: Productos
| Campo           | Tipo de dato | Escala   |
|-----------------|--------------|----------|
| id_producto     | int          | Raz√≥n    |
| nombre_producto | str          | Nominal  |
| categoria       | str          | Nominal  |
| precio_unitario | float        | Raz√≥n    |

---

### Tabla: Detalle de venta
| Campo           | Tipo de dato | Escala   |
|-----------------|--------------|----------|
| id_venta        | int          | Raz√≥n    |
| id_producto     | int          | Raz√≥n    |
| nombre_producto | str          | Nominal  |
| cantidad        | int          | Raz√≥n    |
| precio_unitario | float        | Raz√≥n    |
| importe         | float        | Raz√≥n    |

---

### Tabla: Clientes
| Campo          | Tipo de dato | Escala    |
|----------------|--------------|-----------|
| id_cliente     | int          | Raz√≥n     |
| nombre_cliente | str          | Nominal   |
| email          | str          | Nominal   |
| ciudad         | str          | Nominal   |
| fecha_alta     | datetime.date| Intervalo |
			""")

        elif opcion == "3":
            print("\nüëâ Informaci√≥n, pasos, pseudoc√≥digo y diagrama:")
            print("""
### 3.1 Informaci√≥n
1. **Tema, problema y soluci√≥n.**
2. **Dataset de referencia.** Resumen de fuente y definici√≥n.
3. **Estructura por tabla.** Columnas, tipo y escala de medici√≥n.
4. **Escalas de medici√≥n.** Descripci√≥n y ejemplos.
5. **Sugerencias y mejoras con copilot.**      
6. **Salir.**  

### 3.2 Pasos  
üìù Pasos para dise√±ar el programa

1. Definir el objetivo del programa
Antes de escribir c√≥digo, tienes que tener claro qu√© har√° el programa.
 En este caso:
 üëâ Mostrar un men√∫ en consola con varias opciones y repetirlo hasta que el usuario elija "Salir".

2. Dise√±ar el men√∫ (interfaz en consola)
Piensa en las secciones que quieres mostrar.
Escribes c√≥mo deber√≠a verse el men√∫ en pantalla, por ejemplo:
=== Men√∫ de secciones ===
1) Tema, problema y soluci√≥n
2) Dataset de referencia
3) Informaci√≥n, pasos pseudoc√≥digo y diagrama
4) Sugerencias y mejoras
0) Salir
Esto se convierte en la funci√≥n mostrar_menu().

3. Elegir el mecanismo de repetici√≥n
Necesitamos que el men√∫ se repita mientras el usuario no elija "0".
Para eso usamos un bucle while que termina solo si opcion == "0".
while opcion != "0":
    mostrar_menu()
    opcion = input("Selecciona una opci√≥n: ")

4. Capturar y procesar la opci√≥n elegida
El usuario ingresa un n√∫mero (input() devuelve siempre un string).
Usamos una estructura condicional if/elif/else para responder a cada opci√≥n:
if opcion == "1":
    # Acci√≥n para opci√≥n 1
elif opcion == "2":
    # Acci√≥n para opci√≥n 2
...
Esto se llama control de flujo: dependiendo de la opci√≥n, se ejecuta un bloque de c√≥digo distinto.

5. Escribir las acciones de cada opci√≥n
Para cada n√∫mero del men√∫ defines lo que debe mostrar o hacer.
 Ejemplo en la opci√≥n 1:
print("üëâ Tema, problema y soluci√≥n:")
print("Tema: ...")
print("‚ùó Problema: ...")
print("‚úÖ Soluci√≥n: ...")

6. Control de errores
Si el usuario escribe algo que no corresponde (ejemplo: "abc" o "9"), el programa no debe fallar.
Para eso usamos un else al final:
else:
    print("‚ö†Ô∏è Opci√≥n no v√°lida. Intenta nuevamente.")

7. Cerrar el programa correctamente
Cuando el usuario elige "0", mostramos un mensaje de salida y terminamos el bucle.
elif opcion == "0":
    print("üëã Saliendo del programa...")

8. Organizar el c√≥digo en funciones
Aunque podr√≠as escribir todo en una sola funci√≥n, es mejor modularizar.
Por eso usamos:
mostrar_menu() para solo imprimir el men√∫.
main() para manejar la l√≥gica principal.
Esto hace que el c√≥digo sea m√°s limpio y f√°cil de mantener.

### 3.3 Pseudoc√≥digo

INICIO

FUNCI√ìN mostrar_menu:
    IMPRIMIR "=== Men√∫ de secciones ==="
    IMPRIMIR "1) Tema, problema y soluci√≥n"
    IMPRIMIR "2) Dataset de referencia"
    IMPRIMIR "3) Informaci√≥n, pasos pseudoc√≥digo y diagrama"
    IMPRIMIR "4) Sugerencias y mejoras"
    IMPRIMIR "0) Salir"

FUNCI√ìN main:
    DEFINIR opcion ‚Üê NULO

    MIENTRAS opcion ‚â† "0" HACER:
        LLAMAR mostrar_menu
        LEER opcion (entrada del usuario)

        SI opcion = "1" ENTONCES:
            IMPRIMIR "üëâ Tema, problema y soluci√≥n"
            IMPRIMIR "Tema: ..."
            IMPRIMIR "‚ùó Problema: ..."
            IMPRIMIR "‚úÖ Soluci√≥n: ..."
        
        SINO SI opcion = "2" ENTONCES:
            IMPRIMIR "üëâ Dataset de referencia"
            IMPRIMIR "Detalles del dataset"

        SINO SI opcion = "3" ENTONCES:
            IMPRIMIR "üëâ Informaci√≥n, pasos pseudoc√≥digo y diagrama"
            IMPRIMIR "Explicaci√≥n l√≥gica, pseudoc√≥digo y diagrama"

        SINO SI opcion = "4" ENTONCES:
            IMPRIMIR "üëâ Sugerencias y mejoras"
            IMPRIMIR "Ideas de mejora"

        SINO SI opcion = "0" ENTONCES:
            IMPRIMIR "üëã Saliendo del programa..."

        SINO:
            IMPRIMIR "‚ö†Ô∏è Opci√≥n no v√°lida. Intenta nuevamente."

FIN FUNCI√ìN

LLAMAR main

FIN

### 3.4 Diagrama de flujo
EN CARPETA
			""")

        elif opcion == "4":
            print("\nüëâ Sugerencias y mejoras:")
            print("""
1. Agregar comentarios: Explica la funci√≥n de cada bloque para facilitar el mantenimiento.
2. Validar entrada del usuario: Usa manejo de excepciones para evitar errores si el usuario ingresa algo inesperado.
3. Separar l√≥gica en funciones: Crea funciones para cada secci√≥n del men√∫, as√≠ el c√≥digo ser√° m√°s modular y f√°cil de ampliar.
4. Uso de diccionario para el men√∫: Puedes mapear las opciones a funciones usando un diccionario, lo que simplifica el flujo.
5. Agregar opci√≥n de volver al men√∫: Permite al usuario regresar al men√∫ principal despu√©s de cada acci√≥n.
6. Internacionalizaci√≥n: Si el programa se usar√° en otros idiomas, considera separar los textos en variables o archivos de recursos.
7. Documentar el c√≥digo: Agrega docstrings a las funciones principales.
8. Agregar pruebas unitarias: Para asegurar que cada funci√≥n se comporta correctamente.
			""")

        elif opcion == "0":
            print("\nüëã Saliendo del programa...")

        else:
            print("\n‚ö†Ô∏è Opci√≥n no v√°lida. Intenta nuevamente.")

if __name__ == "__main__":
    main()
